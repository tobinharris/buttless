h1. My Buttless API

Congratulations, you've just started using Buttless to design, document and develop against your API.

Buttless lets you design an API, generate docs, and develop against it in minutes. No need to have a real back-end in place. 

See the "Buttless home page":https://github.com/tobinharris/buttless for more info.


h2. About 

Buttless is pretty simple. It's structured like this:

* You define your API end points, parameters and descriptions in the @database.yml@ file
* You add example responses in the @/json_examples@ folder
* You add tests for the API, if you want to, in the @/test@ folder.

Creating and modifying your API's design takes seconds or minutes once you get the hang of it. 

After that, you can:

* Run a web server which will serve up your designed API with example data to develop against
* Generate pretty PDF's documenting your API to give to developers to build the real deal against
* Generate pretty HTML documenting for your API
* Run tests the real API, to make sure it's being developed according to your design

h2. Getting Started

h3. Install Gems

Install necessary gems.

<pre>
bundle install
</pre>

h3. Add an API definition to the database.yml file

<pre>
---
  - resource: Funky Thing
    methods:
      - path: /api/funky/thing
        resolves_to: /api/funky/thing/info.json
        method: GET
        precis: |
          Returns information about the thing. 
        description: |
        parameters:            
        example_response: funky_thing
</pre>

h3. Add an example JSON response file

<pre>
# /json_examples/funky_thing.json

{"id": 2, "name": "Funky Thing"}
</pre>

h3. Generate the HTML or PDF docs

Your API is defined, now generate the HTML docs using:

<pre>
rake html
open api-doc/index.html
</pre>

Here's a sample:

!http://puu.sh/nobh!

Note it includes the curl statement, API index, descriptions and parameters.

Or, you can generate a similar PDF using

<pre>
rake pdf
open api-doc/funky-thing.pdf
</pre>



h3. Run a fake API in a web server

<pre>
  cd server
  thin start
</pre>

You're API is now available as a web server. So, without a line of code, you can now do:

<pre>
curl http://localhost:3000/api/funky/stuff
</pre>

Which outputs

<pre>
  [
    {"id": 1, "name": "Funky 1"},
    {"id": 2, "name": "Funky 2"}
  ]
</pre>

That response was the example JSON file referenced in your documentation. 

This is handy if your an iPhone developer, cause you can define your own API, develop against it, and then once you're ready, ask a server-side developer to build the real API!

h5. Define some tests for the API 

It's easier to write API's if you have test cases setup to cover what is needed by the client. Simply add these to the ./test/ folder and then:

<pre>
rake test
</pre>





